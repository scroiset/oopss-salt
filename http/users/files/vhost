# Managed by Salt

{% from "oopss/http/map.jinja" import http_config with context %}

server {
    server_name{% for server_name in root_pathinfo['server_names'] %} {{ server_name }}{% endfor %};
    root {{ http_config['rootdir'] }}/{{ user }}/{{ root_path }};
    access_log {{ http_config['rootdir'] }}/{{ user }}/log/{{ root_path }}-access.log;
    error_log {{ http_config['rootdir'] }}/{{ user }}/log/{{ root_path }}-error.log;

{%- if root_pathinfo['ssl'] is defined %}
    # Enable SSL if requested by pillar config.
    listen {{ root_pathinfo['ssl']['ipaddr'] }}:{{ root_pathinfo['ssl']['port']|default('443') }} ssl;
    {%- if not root_pathinfo['ssl'].get('redirect_http', True) %}
    listen 80;
    {%- endif %}

    ssl_certificate     {{ root_pathinfo['ssl']['cert'] }};
    ssl_certificate_key {{ root_pathinfo['ssl']['key']|default(root_pathinfo['ssl']['cert']) }};

    {% include "oopss/nginx/files/ssl_config" %}
{% endif %}

    location /awstats/ {
        alias /var/cache/awstats/{{ user }}-{{ root_path }}/;
        autoindex on;
        index index.en.html;
        auth_basic "Awstats {{ root_pathinfo['server_names'][0] }}";
        auth_basic_user_file {{ http_auth_file }};
    }

{%- if root_pathinfo['expires_static'] is defined %}
    location ~* \.(?:ico|css|js|gif|jpe?g|png)$ {
        expires {{ root_pathinfo['expires_static'] }};
    }
{%- endif %}

{%- if root_pathinfo['denied_paths'] is defined %}
{%- for denied_path in root_pathinfo['denied_paths'] %}
    # Forbid access to paths defined in pillar denied_path.
    location ~ {{ denied_path }} {
        deny all;
    }
{%- endfor %}
{%- endif %}

{%- if 'gunicorn' == root_pathinfo.get('type', '') or 'proxy' == root_pathinfo.get('type', '') %}
    # Redirect request to HTTP proxy via UNIX socket, if no file matches.
    location @http_proxy {
        proxy_pass http://unix:{{ socket }};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
{%- endif %}

{%- if 'php' == root_pathinfo.get('type', '') or 'php_redirect_to_index' == root_pathinfo.get('type', '') %}
    # Redirect URL ending with .php to PHP-FPM.
    index index.html index.php;
    location ~* \.php$ {
        fastcgi_pass unix:{{ socket }};
        include fastcgi_params;
    }
    location = "/fpm-status" {
        fastcgi_pass unix:{{ socket }};
        include fastcgi_params;
        {%- for ipaddr in grains['ipv4'] %}
        allow {{ ipaddr }};
        {%- endfor %}
        deny all;
    }
{%- endif %}

    location / {
{% if 'gunicorn' == root_pathinfo.get('type', '') or 'proxy' == root_pathinfo.get('type', '') %}
        try_files $uri @http_proxy;
{%- elif 'php_redirect_to_index' == root_pathinfo.get('type', '') %}
        # Redirect each request to index.php if no file matches.
        try_files $uri $uri/ /index.php?$args;
{%- endif %}

{%- if root_pathinfo.get('http_auth', False) %}
        # HTTP AUTH
        auth_basic "HTTP AUTH {{ root_pathinfo['server_names'][0] }}";
        auth_basic_user_file {{ http_auth_file }};
{%- endif %}

{%- if root_pathinfo.get('autoindex', False) %}
        autoindex on;
{%- endif %}

{%- if root_pathinfo['rewrite'] is defined %}
{%- for rewrite_rule, rewrite_target in root_pathinfo['rewrite'].iteritems() %}
        rewrite "{{ rewrite_rule }}" "{{ rewrite_target }}" last;
{%- endfor %}
{%- endif %}

{%- if root_pathinfo['redirect_permanent'] is defined %}
{%- for redirect_permanent_rule, redirect_permanent_target in root_pathinfo['redirect_permanent'].iteritems() %}
        rewrite "{{ redirect_permanent_rule }}" "{{ redirect_permanent_target }}" permanent;
{%- endfor %}
{%- endif %}

{%- if root_pathinfo['error_pages'] is defined %}
{%- for error_code, error_target in root_pathinfo['error_pages'].iteritems() %}
        error_page {{ error_code }} = "{{ error_target }}";
{%- endfor %}
{%- endif %}

{%- if root_pathinfo['nginx_internal'] is defined %}
{%- for src, target in root_pathinfo['nginx_internal'].iteritems() %}
        location {{ src }} {
            internal;
            alias {{ target }};
        }
{%- endfor %}
{%- endif %}

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location = /robots.txt {
            log_not_found off;
            access_log off;
        }

        location /awstats-icon/ {
            alias /usr/share/awstats/icon/;
        }
    }
}

{%- if root_pathinfo['redirect_from'] is defined %}
# Redirect each server name specified in redirect_from (from pillar config) to
# the main server name of the virtual server.
server {
    server_name{% for redirect_from in root_pathinfo['redirect_from'] %} {{ redirect_from }}{% endfor %};
    return 301 http://{{ root_pathinfo['server_names'][0] }}$request_uri;
}
{%- endif %}

{%- if root_pathinfo['redirect_from_ssl'] is defined %}
# Redirect each server name specified in redirect_from (from pillar config) to
# the main server name of the virtual server (over SSL).
server {
    server_name{% for redirect_from_ssl in root_pathinfo['redirect_from_ssl'] %} {{ redirect_from_ssl }}{% endfor %};
    listen {{ root_pathinfo['ssl']['ipaddr'] }}:{{ root_pathinfo['ssl']['port']|default('443') }} ssl;
    ssl_certificate     {{ root_pathinfo['ssl']['cert'] }};
    ssl_certificate_key {{ root_pathinfo['ssl']['key']|default(root_pathinfo['ssl']['cert']) }};
    {% include "oopss/nginx/files/ssl_config" %}
    return 301 https://{{ root_pathinfo['server_names'][0] }}$request_uri;
}
{%- endif %}

{% if root_pathinfo['ssl'] is defined %}
{% if root_pathinfo['ssl'].get('redirect_http', True) %}
# If this is a SSL virtual server, redirect each server name called without SSL
# to the SSL counterpart.
server {
    server_name{% for server_name in root_pathinfo['server_names'] %} {{ server_name }}{% endfor %};
    return 301 https://$host$request_uri;
}
{%- endif %}
{%- endif %}

